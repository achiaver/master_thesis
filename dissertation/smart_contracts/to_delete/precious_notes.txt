http://docs.neo.org/en-us/sc/introduction.html

NEO Documentation
    http://docs.neo.org/en-us/index.html
-----------------------------------------------------------------------------------
1. NEO's code references:

    1.1 API's
        1.1.1 namespace NEO
                General information: https://docs.neo.org/en-us/sc/reference/api/neo.html#readwrite-api
                All classes: https://docs.neo.org/en-us/sc/reference/fw/dotnet/neo.html

        1.1.2 namespace System (neoVM)
                General: https://docs.neo.org/en-us/sc/reference/api/System.html
                The classes :https://docs.neo.org/en-us/sc/reference/fw/dotnet/System.html

    1.2 NEP5 --> padrão NEO para tokens
        https://github.com/neo-project/examples-csharp/blob/master/NEP5/NEP5.cs

    1.3 "When a smart contract is deployed on the blockchain, it can be used by other users or invoked by other contracts."
    Mas quando não precisa de deploy? Em quais casos vou usar isso? Onde o contrato vai ficar armazenado?

    1.4 APPCALL
    [Appcall("97b9373228d508155d5bdf75cd4703dfb1137fe0")]
    public static extern bool AnotherContract(string arg, object[] args);

    1.5 SYSCALL
    [Syscall("Neo.Account.GetBalance")]
    public extern long GetBalance(byte[] asset_id);

    1.6 OPCALL
    [OpCode(Neo.VM.OpCode.LEFT)]
    public extern static byte[] Take(byte[] good, int index);

    1.7 Deploying and Invoking Smart Contracts
    https://docs.neo.org/en-us/sc/quickstart/deploy-invoke.html

2. NEO's code economics

    2.1 "Deploying and invoking smart contracts will cost fees."
        Quanto custam os API's? --> https://docs.neo.org/en-us/sc/systemfees.html



3. Sharable Group fluxogram
    
    3.1 registration.cs

        3.1.1 hierarchy.cs

            3.1.1.1 poll.cs

        3.1.2 token.cs

            3.1.2.1 trade.cs
                3.1.2.1.1 auction.cs (probably a function for the internal storage)

            3.1.2.2 crowdsale.cs




// =========================TGsm notes=============================
// Create a new sidechain or add more tokens to the market

// CONTRACT ASSET
// Different than Neo, a Global Asset
// must be NEP5 compliant!

// Entender
// https://github.com/SciChain/scichain/blob/master/SciChain/SciChain/scichain.cs



// Unlike the verification trigger which is triggered by a transfer, an application trigger is triggered by a special transaction InvocationTransaction.
https://docs.neo.org/en-us/sc/trigger.html

// If the execution of the verification contract is failed, the transaction will not be recorded in the blockchain.
if (Runtime.Trigger == TriggerType.Verification) {}

// Since the application contract is executed after InvocationTransaction is confirmed, the transaction is recorded in the blockchain no matter the execution of the application contract is successful or not. The success and failure of InvocationTransaction is not necessarily related to the success or failure of execution of smart contracts.
if (Runtime.Trigger == TriggerType.Application) {}


using NEO.Asset;
token = Create(string "tName", byte[] amount); // Isso?
// https://docs.neo.org/en-us/sc/reference/api/neo.html#readwrite-api


// 12/01/19
// Falta entender:
//     1. Como ver o deploy do contrato na blockchain pelo neocompiler? -- ok (14/01/19)
//     2. Como fazer um contrato falar com outro? Seria um get a partir da hash? Seria possível acessar o 'persistent storage' do outro? (forçar isso para ver o erro q dá através do TriggerType.Verification)
//     3. Qual a diferença das declarações de funções e variáveis public e private na ledger?
//     4. Consigo ler o contrato armazenado na ledger? Não consegui acessar isso pelo City of Zion...
//     5. Pq preciso definir os cabeçalhos 'using' se nenhum exemplo no site tem isso?
//     [17/01/19] 6. Como funciona o Mudamos+? Como está sendo feito que o login de email refira-se a um registro na chain?

// ================================================================

Inversor de ScriptHash: Pq isso é necessário?
http://pythontutor.com/live.html#code=import%20re%0A%0Ax%20%3D%20%22e9eed8dc39332032dc22e5d6e86332c50327ba23%22%0Aprint%28''.join%28re.findall%28'..',x%29%5B%3A%3A-1%5D%29%29&cumulative=false&curInstr=3&heapPrimitives=false&mode=display&origin=opt-live.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false

// ================================================================

Entendendo o ExecutionEngine

using Neo.SmartContract.Framework;
using Neo.SmartContract.Framework.Services.Neo;
using Neo.SmartContract.Framework.Services.System; // required for 'ExecutionEngine'
using System;
using System.ComponentModel;
using System.Numerics;

namespace Neo.SmartContract
{
    public class ICO_Template : Framework.SmartContract
    {
        // Token Settings
        public static string Name = "name of the token";
        public static readonly byte[] Owner = "AK2nJJpJr6o664CWJKi1QRXjqeic2zRp8y".ToScriptHash();

        public static void Main()
        {
            // get smart contract script hash
            Runtime.Notify(ExecutionEngine.ExecutingScriptHash);
            
            Runtime.Notify(ExecutionEngine.CallingScriptHash);
            
            Runtime.Notify(ExecutionEngine.EntryScriptHash);
        }
    }
}

RESULTADOS
SC:
a899060ceacde5c0068f5cd3ee7446ce1b32cd33 == ALVmvXmwULY8rusPrb5fQNLqiJNQPvacqQ

caller/Onwer:
AK2nJJpJr6o664CWJKi1QRXjqeic2zRp8y == e9eed8dc39332032dc22e5d6e86332c50327ba23

ExecutingScriptHash:
33cd321bce4674eed35c8f06c0e5cdea0c0699a8 == a899060ceacde5c0068f5cd3ee7446ce1b32cd33 (SC)

CallingScriptHash:
c2e3b9e122e17d574c92eb28b07f1feb0e16df51 == 51df160eeb1f7fb028eb924c577de122e1b9e3c2 (?)

EntryScriptHash:
c2e3b9e122e17d574c92eb28b07f1feb0e16df51 == 51df160eeb1f7fb028eb924c577de122e1b9e3c2 (?)

// ================================================================
